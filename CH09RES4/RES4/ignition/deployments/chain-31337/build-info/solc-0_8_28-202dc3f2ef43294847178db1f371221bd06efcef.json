{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-202dc3f2ef43294847178db1f371221bd06efcef",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/RES4new.sol": "project/contracts/RES4new.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": []
    },
    "sources": {
      "project/contracts/RES4new.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.26;\r\n\r\ninterface IERC165 {\r\n    function supportsInterface(bytes4 interfaceID)\r\n        external\r\n        view\r\n        returns (bool);\r\n}\r\n\r\ninterface IERC721 is IERC165 {\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n    function safeTransferFrom(address from, address to, uint256 tokenId)\r\n        external;\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n    function approve(address to, uint256 tokenId) external;\r\n    function getApproved(uint256 tokenId)\r\n        external\r\n        view\r\n        returns (address operator);\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n    function isApprovedForAll(address owner, address operator)\r\n        external\r\n        view\r\n        returns (bool);\r\n}\r\n\r\ninterface IERC721Receiver {\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\ncontract ERC721RES4 is IERC721 {\r\n    event Transfer(\r\n        address indexed from, address indexed to, uint256 indexed id\r\n    );\r\n    event Approval(\r\n        address indexed owner, address indexed spender, uint256 indexed id\r\n    );\r\n    event ApprovalForAll(\r\n        address indexed owner, address indexed operator, bool approved\r\n    );\r\n\r\n    struct Asset{\r\n        uint256 assetId;\r\n        uint256 price;\r\n    }\r\n    \r\n    address public supervisor;\r\n\r\n    // Mapping of token ID to asset data\r\n    mapping(uint256 => Asset) public assetMap;\r\n\r\n    //total count of assets\r\n    uint256 public assetsCount;\r\n\r\n    // Mapping from token ID to owner address\r\n    mapping(uint256 => address) internal _assetOwner;\r\n\r\n    // Mapping owner address to token count\r\n    mapping(address => uint256) internal _ownedAssetsCount;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping(uint256 => address) internal _assetApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\r\n\r\n    constructor(){\r\n        supervisor = msg.sender;\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId)\r\n        external\r\n        pure\r\n        returns (bool)\r\n    {\r\n        return interfaceId == type(IERC721).interfaceId\r\n            || interfaceId == type(IERC165).interfaceId;\r\n    }\r\n\r\n    function ownerOf(uint256 id) external view returns (address owner) {\r\n        owner = _assetOwner[id];\r\n        require(owner != address(0), \"token doesn't exist\");\r\n    }\r\n\r\n    function balanceOf(address owner) external view returns (uint256) {\r\n        require(owner != address(0), \"owner = zero address\");\r\n        return _ownedAssetsCount[owner];\r\n    }\r\n\r\n    function setApprovalForAll(address operator, bool approved) external {\r\n        isApprovedForAll[msg.sender][operator] = approved;\r\n        emit ApprovalForAll(msg.sender, operator, approved);\r\n    }\r\n\r\n    function approve(address spender, uint256 id) external {\r\n        address owner = _assetOwner[id];\r\n        require(\r\n            msg.sender == owner || isApprovedForAll[owner][msg.sender],\r\n            \"not authorized\"\r\n        );\r\n\r\n        _assetApprovals[id] = spender;\r\n\r\n        emit Approval(owner, spender, id);\r\n    }\r\n\r\n    function getApproved(uint256 id) external view returns (address) {\r\n        require(_assetOwner[id] != address(0), \"token doesn't exist\");\r\n        return _assetApprovals[id];\r\n    }\r\n\r\n    function _isApprovedOrOwner(address owner, address spender, uint256 id)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return (\r\n            spender == owner || isApprovedForAll[owner][spender]\r\n                || spender == _assetApprovals[id]\r\n        );\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 id) public {\r\n        require(from == _assetOwner[id], \"from != owner\");\r\n        require(to != address(0), \"transfer to zero address\");\r\n\r\n        require(_isApprovedOrOwner(from, msg.sender, id), \"not authorized\");\r\n\r\n        _ownedAssetsCount[from]--;\r\n        _ownedAssetsCount[to]++;\r\n        _assetOwner[id] = to;\r\n\r\n        delete _assetApprovals[id];\r\n\r\n        emit Transfer(from, to, id);\r\n    }\r\n\r\n    function safeTransferFrom(address from, address to, uint256 id) external {\r\n        transferFrom(from, to, id);\r\n\r\n        require(\r\n            to.code.length == 0\r\n                || IERC721Receiver(to).onERC721Received(msg.sender, from, id, \"\")\r\n                    == IERC721Receiver.onERC721Received.selector,\r\n            \"unsafe recipient\"\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        bytes calldata data\r\n    ) external {\r\n        transferFrom(from, to, id);\r\n\r\n        require(\r\n            to.code.length == 0\r\n                || IERC721Receiver(to).onERC721Received(msg.sender, from, id, data)\r\n                    == IERC721Receiver.onERC721Received.selector,\r\n            \"unsafe recipient\"\r\n        );\r\n    }\r\n\r\n    function _mint(address to, uint256 id) internal {\r\n        require(to != address(0), \"mint to zero address\");\r\n        require(_assetOwner[id] == address(0), \"already minted\");\r\n\r\n        _ownedAssetsCount[to]++;\r\n        _assetOwner[id] = to;\r\n\r\n        emit Transfer(address(0), to, id);\r\n    }\r\n    ///our functions////\r\n    function addAsset(uint256 price,address to) public{\r\n        require(supervisor == msg.sender,'NotAManager');\r\n        \r\n        assetMap[assetsCount] = Asset(assetsCount,price);\r\n        _mint(to,assetsCount);\r\n        assetsCount = assetsCount+1;\r\n    }\r\n\r\n    function build(uint256 assetId,uint256 value) public payable{\r\n        require(_assetOwner[assetId] == msg.sender, \"Not token owner\");\r\n        Asset memory oldAsset = assetMap[assetId];\r\n        assetMap[assetId] = Asset(oldAsset.assetId, oldAsset.price+value);\r\n    }\r\n    function appreciate(uint256 assetId,uint256 value) public{\r\n        require(msg.sender==supervisor,\"NotaManager\");\r\n        Asset memory oldAsset = assetMap[assetId];\r\n        assetMap[assetId] = Asset(oldAsset.assetId, oldAsset.price+value);\r\n    }\r\n    function depreciate(uint256 assetId,uint256 value) public{\r\n        require(msg.sender==supervisor,\"NotaManager\");\r\n        Asset memory oldAsset = assetMap[assetId];\r\n        assetMap[assetId] = Asset(oldAsset.assetId, oldAsset.price-value);\r\n    }\r\n\r\n    function clearApproval(uint256 id) external {\r\n        address owner = _assetOwner[id];\r\n        require(owner != address(0), \"token doesn't exist\");\r\n        require(msg.sender == owner || isApprovedForAll[owner][msg.sender],\"not authorized\");\r\n\r\n        _assetApprovals[id] = address(0);\r\n        emit Approval(owner, address(0), id);\r\n    }\r\n}"
      }
    }
  }
}