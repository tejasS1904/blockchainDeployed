{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-d79441b25dd67f2f735e1f80befab03f5caa81bc",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/ballot.sol": "project/contracts/ballot.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": []
    },
    "sources": {
      "project/contracts/ballot.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.19;\r\n\r\ncontract Ballot {\r\n\r\n    struct Voter {                     \r\n        uint weight;\r\n        bool voted;\r\n        uint vote;\r\n    }\r\n    \r\n    struct Proposal {                  \r\n        uint voteCount;\r\n    }\r\n\r\n    address chairperson;\r\n    mapping(address => Voter) voters;\r\n    Proposal[] proposals;\r\n    \r\n    modifier onlyChair() {\r\n        require(msg.sender == chairperson);\r\n        _;\r\n    }\r\n     \r\n    modifier validVoter() {\r\n        require(voters[msg.sender].weight > 0, \"Not a Registered Voter\");\r\n        _;\r\n    }\r\n\r\n    constructor(uint numProposals) {\r\n        chairperson = msg.sender;\r\n        voters[chairperson].weight = 2;\r\n        \r\n        for (uint prop = 0; prop < numProposals; prop++) {\r\n            proposals.push(Proposal(0));\r\n        }\r\n    }\r\n    \r\n    function register(address voter) public onlyChair {\r\n        voters[voter].weight = 1;\r\n        voters[voter].voted = false;\r\n    }\r\n\r\n    function vote(uint toProposal) public validVoter {\r\n        Voter storage sender = voters[msg.sender];\r\n        \r\n        require(!sender.voted, \"Already voted\"); \r\n        require(toProposal < proposals.length, \"Invalid proposal\"); \r\n        \r\n        sender.voted = true;\r\n        sender.vote = toProposal;   \r\n        proposals[toProposal].voteCount += sender.weight;\r\n    }\r\n\r\n    function reqWinner() public view returns (uint winningProposal) {\r\n        uint winningVoteCount = 0;\r\n        \r\n        for (uint prop = 0; prop < proposals.length; prop++) {\r\n            if (proposals[prop].voteCount > winningVoteCount) {\r\n                winningVoteCount = proposals[prop].voteCount;\r\n                winningProposal = prop;\r\n            }\r\n        }\r\n        \r\n        require(winningVoteCount >= 3, \"Insufficient votes\");\r\n    }\r\n}"
      }
    }
  }
}